#!/usr/bin/env python

import random
import os
import os.path
import time
import math

filter = {}#'com.tencent.mobileqq':1, 'com.tencent.mm':2, 'com.tencent.qqlive':3, 'com.taobao.taobao':4, 'com.android.tunkoo.scan':4, 'com.pplive.androidphone':1, 'com.jingdong.app.mall':1, 'com.youku.phone':1, 'com.UCMobile':1, 'com.qiyi.video':1, 'com.android.settings':1}

def s(filename, m):
	with open(filename) as f:
		all = f.readlines()
		last = ''
		for sstr in all:
			ss = sstr.split('\t')
			if filter.has_key(ss[2]):
				continue
			if last != ss[2]:
				m.append(sstr)
				last = ss[2]

def bigAna():
	applist = []
	t1 = {}
	with open('lastAppResult') as f:
		all = f.readlines()
		for ss in all:
			m = ss.split('\t')
			if not filter.has_key(m[1]):
				applist.append(m[1])
				t1[m[0] + "\t" + m[1]] = int(m[2])
	applist = {}.fromkeys(applist).keys()
	print "App Num:", len(applist)
	print "lastApp:", len(t1.keys())

	t2 = {}
	with open('cellIDResult') as f:
                all = f.readlines()
                for ss in all:
                        m = ss.split('\t')
			if filter.has_key(m[0]):
				continue
			t2[m[0] + "\t" + m[1]] = int(m[2])
	print "cellID:", len(t2.keys())

	t3 = {}
	with open('timeWeekdays') as f:
                all = f.readlines()
                for ss in all:
                        m = ss.split('\t')
			if filter.has_key(m[0]):
                                continue
                        t3[m[0] + "\t" + m[1]] = int(m[2])
        print "Weekdays:", len(t3.keys())

	t4 = {}
	with open('timeWeekend') as f:
                all = f.readlines()
                for ss in all:
                        m = ss.split('\t')
                        if filter.has_key(m[0]):
                                continue
                        t4[m[0] + "\t" + m[1]] = int(m[2])
        print "Weekend:", len(t4.keys())

	t5 = {}
	with open('networkResult') as f:
                all = f.readlines()
                for ss in all:
                        m = ss.split('\t')
                        if filter.has_key(m[0]):
                                continue
                        t5[m[0] + "\t" + m[1]] = int(m[2])
        print "network:", len(t5.keys())

	t6 = {}
	with open('avgDownSpeedResult') as f:
                all = f.readlines()
                for ss in all:
                        m = ss.split('\t')
                        if filter.has_key(m[0]):
                                continue
                        t6[m[0] + "\t" + m[1]] = int(m[2])
        print "avgDownSpeed:", len(t6.keys())	

	all = []
#	with open('demo1') as f:
	for parent,dirnames,filenames in os.walk("tmp/"):
		for filename in filenames:
			if filename.find('sort') != -1:
				s(os.path.join(parent,filename), all)
	print "record:", len(all)

	rnum = {}
	while len(rnum.keys()) < 1000:
		ri = random.randint(1, len(all))
                last = all[ri - 1][0]
                current = all[ri][0]
		if last != current:
			continue
		rnum[ri] = 1
	rnum = rnum.keys()
	print "randomNum:", len(rnum)
#	rnum = [1677312, 899072, 1218562, 1409707, 1714518, 956417, 469003, 2072588, 1003522, 2263055, 1562640, 540691, 1384468, 1198766, 1912834, 829470, 1126431, 471072, 1378338, 1062947, 1423398, 1810474, 1779756, 661549, 770099, 1075252, 12638, 2185270, 409656, 1595453, 1102165, 2132034, 1570884, 688198, 1292362, 1607759, 1466450, 1497176, 2117728, 880737, 1998948, 546921, 1056874, 2240621, 2117744, 1568881, 510066, 698483, 473204, 1026165, 1738870, 1073172, 559229, 452734, 1349761, 1226883, 1255556, 1790961, 1241453, 1499280, 1727059, 2148500, 1391982, 645275, 1003677, 794783, 14704, 1015972, 1085126, 2034281, 882856, 1984683, 1554605, 823471, 776369, 1990834, 1417395, 460981, 1354441, 1091769, 417978, 1806525, 1306814, 1503428, 907461, 321734, 1601737, 104650, 458956, 1167565, 372942, 2062544, 229585, 950654, 1450199, 970840, 1444058, 1503951, 227548, 1325434, 11301, 1296610, 1921251, 137444, 1179877, 379112, 2171114, 1765611, 590061, 1612014, 1233277, 2265328, 1757425, 1941747, 1839348, 1069301, 518391, 767700, 334207, 1974525, 1978622, 555263, 1558784, 1366273, 1659138, 1070123, 638438, 1687816, 366857, 1148631, 1777891, 515295, 954640, 1974545, 358676, 1390869, 1534138, 1134873, 2259227, 1181980, 780973, 868641, 1327395, 1587493, 703537, 364840, 82218, 2197804, 352559, 2265393, 1835315, 1382710, 43320, 1026362, 790850, 39235, 2003268, 1974597, 1927905, 1491272, 33097, 2263373, 1542478, 92495, 246096, 1075539, 1704277, 1290582, 344604, 282975, 938337, 1536354, 229732, 1232375, 2091368, 1391676, 1958250, 1507691, 172397, 308870, 1496125, 2048336, 2186984, 1180270, 1130868, 614775, 1618298, 1640829, 1624446, 188799, 2206083, 1567108, 1517963, 983438, 1341839, 415129, 12701, 1364383, 852384, 1393060, 905286, 1246289, 1655537, 1478044, 1692077, 2003375, 1175025, 496052, 8629, 1751481, 1683900, 758206, 1833409, 375234, 1366467, 428485, 848326, 725448, 747977, 78282, 2114531, 149159, 920016, 2130386, 1792467, 565716, 473557, 61528, 131545, 338395, 2183645, 2273760, 223714, 276967, 759920, 2108871, 130679, 25072, 758259, 2126326, 1245690, 2142975, 1042941, 49662, 2159103, 1237504, 1993217, 2054659, 1095307, 805381, 1881072, 1980935, 344586, 647691, 39438, 82447, 983568, 2269272, 838162, 416279, 1808920, 760345, 1036719, 1831452, 1485342, 1354501, 1010209, 1538596, 277033, 113194, 61191, 1501740, 2109997, 975406, 2126383, 51761, 776153, 1733172, 1679926, 1622585, 1410509, 1832299, 524860, 1474997, 1401408, 940616, 2226761, 77626, 701006, 797265, 551507, 90708, 2203065, 756313, 872685, 1319518, 637535, 1985120, 1485410, 1866341, 2054759, 1287963, 2175593, 762475, 1598060, 178798, 297583, 1749623, 1158585, 1190525, 1817214, 1186431, 27264, 1541568, 10882, 1446337, 1745544, 1235597, 696975, 789137, 2232978, 1690259, 2060949, 610966, 1787441, 1209797, 864929, 952995, 1223332, 1159622, 6822, 895655, 2269867, 1931948, 248493, 281262, 1479345, 1686195, 1637046, 392649, 846521, 1096378, 975306, 168736, 1514180, 76615, 1481414, 2081479, 1368777, 1501898, 1796811, 1293006, 2169551, 1385172, 1055449, 674522, 1514959, 1886940, 1508061, 1637089, 326370, 551655, 119531, 2048748, 996077, 445166, 1979119, 2071280, 2161393, 258803, 623348, 316149, 1145592, 1270237, 1815291, 1041148, 1770237, 1882878, 465663, 604929, 2003714, 84741, 1707235, 1653548, 551693, 1661817, 1032976, 1340177, 242451, 1250069, 121623, 1009796, 1866885, 1487648, 246562, 713508, 1661204, 2104103, 1194796, 1743662, 359215, 1483568, 1489713, 75997, 1516341, 1608506, 31548, 1249077, 2116416, 160577, 238402, 1065796, 1471301, 454113, 1473353, 2195938, 1571662, 1328269, 629587, 979796, 662357, 2106198, 1661785, 1719130, 873615, 523101, 1284959, 1248096, 1249424, 1168227, 729956, 224742, 1596263, 1976611, 2042343, 2274156, 1591101, 426320, 1917809, 1387385, 584570, 1588092, 732032, 1131396, 166792, 660361, 87866, 2241422, 211856, 590127, 330642, 295368, 760726, 1489082, 2130843, 899996, 474015, 1514400, 1926051, 1855293, 1104807, 2093994, 1831851, 1670062, 1242034, 997875, 838582, 1487804, 1035198, 234433, 1190851, 1682373, 1772486, 1313735, 2122697, 740298, 65015, 1919949, 1434574, 881618, 2020309, 1719254, 1577943, 1018840, 1817561, 2153434, 902107, 1741788, 1917918, 221349, 1461218, 2182115, 1698789, 1946601, 2126827, 115693, 324093, 1840112, 262312, 2083827, 732149, 19448, 689147, 836607, 990720, 1491971, 457733, 1004550, 13825, 258905, 158736, 343057, 2079762, 31764, 2114734, 506902, 404313, 832004, 906266, 1473565, 597022, 1485404, 1715233, 625701, 1283112, 814121, 1053385, 1766919, 269356, 994352, 658481, 1588274, 214068, 107853, 1819741, 252986, 187452, 752701, 130113, 1627205, 734278, 488529, 1152084, 1152085, 1528918, 1293400, 1266777, 1547464, 616634, 434716, 466789, 1737827, 871525, 1592424, 2155626, 1344619, 1778796, 261229, 1575101, 760945, 351348, 1199221, 1528950, 2110585, 1653883, 140412, 386240, 2034820, 1125509, 935046, 1989770, 1256589, 77677, 126488, 206019, 1877140, 1332552, 89239, 711832, 994457, 1306341, 1950876, 914589, 2163870, 115873, 33307, 2157737, 705710, 631985, 1483954, 238773, 780489, 1151519, 851136, 1797315, 2232865, 1526984, 245965, 898257, 1490130, 2260179, 1070292, 1053910, 134359, 1440292, 390364, 1836254, 994527, 1656032, 1834211, 1299685, 432337, 2129130, 1680619, 1099901, 2024688, 529650, 52435, 1731828, 1021173, 1131767, 2079992, 1316052, 1559804, 1936637, 1096962, 1772812, 2018576, 1986316, 1092883, 447766, 1361175, 1723672, 1090841, 1830172, 1756446, 1088801, 306466, 1367025, 791845, 1639719, 2260268, 1762605, 898351, 1293616, 1060403, 1051958, 1714740, 1301818, 480571, 1934654, 447809, 2073924, 1559747, 1887560, 40265, 2264396, 776418, 630094, 714064, 781649, 1387858, 505059, 1969492, 326999, 1049944, 2028889, 998748, 562525, 327007, 2227556, 548198, 691562, 1680747, 2155885, 699758, 1265008, 1049972, 458103, 1564026, 1885565, 277887, 2256258, 1766789, 1142150, 1518983, 1449352, 2266507, 1009036, 1564045, 1093006, 1510799, 2047377, 1007171, 1364206, 353688, 200089, 2272668, 342963, 1629601, 782235, 1801637, 970152, 1521067, 1033645, 753071, 486833, 1033650, 926963, 1236407, 1756601, 1170875, 986558, 2151872, 77251, 1357252, 851397, 389025, 2063816, 1574345, 339402, 2024907, 2023620, 325071, 2051538, 1954723, 13781, 767446, 2215386, 366044, 1762782, 284127, 1717729, 1578466, 1543651, 731380, 1879526, 1078760, 559015, 2045421, 2080238, 1818097, 1168883, 998230, 1820151, 753144, 571988, 1355258, 140796, 1091498, 1299968, 620033, 428971, 2176516, 81415, 945674, 509451, 60941, 930649, 7697, 1992963, 880148, 1506838, 304664, 2151963, 765957, 1777181, 2231838, 514520, 555301, 319876, 1490472, 2252329, 1584050, 1711662, 1646127, 1455664, 1504817, 2070067, 999937, 753206, 2025015, 1263160, 955966, 212544, 710209, 2146306, 1191491, 271943, 847437, 532047, 2088272, 1144403, 1680980, 1658454, 1953721, 1777245, 2113119, 919824, 917090, 181859, 671332, 439507, 1558119, 206619, 1539691, 949869, 2068079, 1048183, 949399, 460410, 745083, 1207935, 1358444, 42132, 42603, 1093252, 202374, 1965705, 703767, 243341, 1257103, 528018, 568979, 1170030, 99990, 812313, 1005208, 727663, 749215, 1740450, 1306276, 2225829, 56998, 859815, 110249, 517803, 1861295, 276144, 1801910, 357321, 865978, 364220, 177855, 1653024, 272070, 1324744, 765559, 454605, 278225, 542419, 442068, 525262, 1584854, 347863, 718552, 421594, 720603, 2002652, 610682, 1234655, 403168, 85731, 2229988, 1961701, 863975, 1655303, 1171177, 977874, 970478, 993192, 2262773, 2193142, 1355732, 1726203, 1775337, 1408766, 1158101, 1584896, 1914625, 556802, 2109188, 1675013, 210695, 1148681, 801278, 1047853, 319248, 1736466, 1789571, 2092822, 231385, 1965848, 1713945, 1345307, 787418, 100128, 1822497, 1408646, 1992486, 1797931, 552749, 1274504, 1756980, 1704926, 673590, 1982089, 900921, 773946, 921405, 1259329, 2244418, 900747, 571702, 1863494, 219105, 1277768, 161609, 1972045, 145037, 671571, 2250582, 1400663, 1910617, 450400, 1554277, 2084717, 1460078, 335732, 1546101, 690040, 970625, 2193282, 407427, 167813, 900417, 1118088, 1908617, 1734538, 597899, 1172738, 987021, 2122733, 1126040, 196500, 1316758, 2086808, 645444, 2264987, 552861, 434081, 249763, 1933220, 675142, 749479, 63400, 638889, 294826, 890795, 90028, 1927085, 352584, 993202, 167859, 1272137, 783653, 409529, 470687, 1195964, 2224062, 841663, 114624, 583710, 1720261, 1406919, 1138634, 2090658, 1630541, 1060818, 959139, 1693652, 1972185, 1167323, 432094, 410400, 274401, 122850, 215035, 1267684, 1789606, 608230, 1949673, 448491, 675822, 1738744, 1041748, 2015226, 1720319, 1605630, 852309]

	max1 = max(t1.values()) + 0.0
        max2 = max(t2.values()) + 0.0
        max3 = max(t3.values()) + 0.0
        max4 = max(t4.values()) + 0.0
        max5 = max(t5.values()) + 0.0
        max6 = max(t6.values()) + 0.0
	print max1,max2,max3,max4,max5,max6

	hit = [0,0,0,0,0,0,0,0,0,0]
	id = 0
	usertotal = {}
	usertotal2 = {}
	capplist = []
	for ri in rnum:
		id += 1
		last = all[ri - 1]
		current = all[ri]
		m = current.split("\t")
		capp = m[2]
		capplist.append(capp)
		lapp = last.split("\t")[2]
		ctime = m[1]
		cnet = m[3]
		ccell = m[4]
		cspeed = m[5]
		s5 = int( ctime ) / 1000
		s1 = time.strftime("%H",time.localtime(s5))
		s5 = int(time.strftime("%w",time.localtime(s5)))
		weekend = False
		if s5 <= 5 and s5 > 0:
			weekend = True
		re = {}
		ss5 = int( cspeed ) / 1000
		logspeed = '0'
		if ss5 > 0:
			logspeed = str( int( math.log10( ss5 ) + 1 ) )
#		print capp,lapp,ctime,cnet,ccell,cspeed
		for it in applist:
			if weekend:
				re[it] = t1[lapp+"\t"+it] if t1.has_key(lapp+"\t"+it) else 0 * t2[it+"\t"+ccell] if t2.has_key(it+"\t"+ccell) else 0 * t4[it+"\t"+s1] if t4.has_key(it+"\t"+s1) else 0 * t5[it+"\t"+cnet] if t5.has_key(it+"\t"+cnet) else 0 * t6[it+"\t"+logspeed] if t6.has_key(it+"\t"+logspeed) else 0
#				re[it] = t1[lapp+"\t"+it] if t1.has_key(lapp+"\t"+it) else 0 * t2[it+"\t"+ccell] if t2.has_key(it+"\t"+ccell) else 0 * t4[it+"\t"+s1] if t4.has_key(it+"\t"+s1) else 0 * t5[it+"\t"+cnet] if t5.has_key(it+"\t"+cnet) else 0 * t6[it+"\t"+logspeed] if t6.has_key(it+"\t"+logspeed) else 0
#				re[it] = 3 * t1[lapp+"\t"+it] if t1.has_key(lapp+"\t"+it) else 0 / max1 + 4 * t2[it+"\t"+ccell] if t2.has_key(it+"\t"+ccell) else 0 / max2 + t4[it+"\t"+s1] if t4.has_key(it+"\t"+s1) else 0 / max4 + t5[it+"\t"+cnet] if t5.has_key(it+"\t"+cnet) else 0 / max5 + t6[it+"\t"+logspeed] if t6.has_key(it+"\t"+logspeed) else 0 / max6
#				re[it] = t1[lapp+"\t"+it] if t1.has_key(lapp+"\t"+it) else 0
#				re[it] = t4[it+"\t"+s1] if t4.has_key(it+"\t"+s1) else 0
#				re[it] = t4[it+"\t"+s1] if t4.has_key(it+"\t"+s1) else 0 + t3[it+"\t"+s1] if t3.has_key(it+"\t"+s1) else 0
#				re[it] = t6[it+"\t"+logspeed] if t6.has_key(it+"\t"+logspeed) else 0
			else:
				re[it] = t1[lapp+"\t"+it] if t1.has_key(lapp+"\t"+it) else 0 * t2[it+"\t"+ccell] if t2.has_key(it+"\t"+ccell) else 0 * t3[it+"\t"+s1] if t3.has_key(it+"\t"+s1) else 0 * t5[it+"\t"+cnet] if t5.has_key(it+"\t"+cnet) else 0 * t6[it+"\t"+logspeed] if t6.has_key(it+"\t"+logspeed) else 0
#				re[it] = t1[lapp+"\t"+it] if t1.has_key(lapp+"\t"+it) else 0 * t2[it+"\t"+ccell] if t2.has_key(it+"\t"+ccell) else 0 * t3[it+"\t"+s1] if t3.has_key(it+"\t"+s1) else 0 * t5[it+"\t"+cnet] if t5.has_key(it+"\t"+cnet) else 0 * t6[it+"\t"+logspeed] if t6.has_key(it+"\t"+logspeed) else 0
#				re[it] = 3 * t1[lapp+"\t"+it] if t1.has_key(lapp+"\t"+it) else 0 / max1 + 4 * t2[it+"\t"+ccell] if t2.has_key(it+"\t"+ccell) else 0 / max2 + t3[it+"\t"+s1] if t3.has_key(it+"\t"+s1) else 0 / max3 + t5[it+"\t"+cnet] if t5.has_key(it+"\t"+cnet) else 0 / max5 + t6[it+"\t"+logspeed] if t6.has_key(it+"\t"+logspeed) else 0 / max6
#				re[it] = t1[lapp+"\t"+it] if t1.has_key(lapp+"\t"+it) else 0
#				re[it] = t3[it+"\t"+s1] if t3.has_key(it+"\t"+s1) else 0
#				re[it] = t4[it+"\t"+s1] if t4.has_key(it+"\t"+s1) else 0 + t3[it+"\t"+s1] if t3.has_key(it+"\t"+s1) else 0
#				re[it] = t6[it+"\t"+logspeed] if t6.has_key(it+"\t"+logspeed) else 0
#			print re[it]
		re = sorted(re.items(), key=lambda d: d[1])
#		print "result:", len(re)
		hhit = False
		for i in range(0,10):
			if hhit:
				hit[i] += 1
				continue
			if capp == re[len(re) -  1 - i][0]:
				hit[i] += 1
				hhit = True
		if hhit:
			if usertotal.has_key(m[0]):
				usertotal[m[0]] += 1.0
			else:
				usertotal[m[0]] = 1.0
		if usertotal2.has_key(m[0]):
                        usertotal2[m[0]] += 1.0
                else:
                        usertotal2[m[0]] = 1.0
	print id, hit# , capp, re[-5:]
	print len({}.fromkeys(capplist).keys())
#	for i in usertotal.keys():
#		print usertotal[i] / usertotal2[i]

def speedTop():
        with open('avgDownSpeedResult') as f:
                all = f.readlines()
                ha = {}
                for ss in all:
                        m = ss.split('\t')
			if not ha.has_key(m[1]):
				ha[m[1]] = {}
                        if ha[m[1]].has_key(m[0]):
                                ha[m[1]][m[0]] += int(m[2])
                        else:
                                ha[m[1]][m[0]] = int(m[2])
		for h in ha.keys():
			print h, sorted(ha[h].items(), key=lambda d: d[1])[-10:]

def networkTop():
        with open('networkResult') as f:
                all = f.readlines()
                haw = {}
                ham = {}
                for ss in all:
                        m = ss.split('\t')
			ha = {}
			if m[1] == 'mobile':
				ha = ham
			else:
				ha = haw
                        if ha.has_key(m[0]):
                                ha[m[0]] += int(m[2])
                        else:
                                ha[m[0]] = int(m[2])
                print "mobile", sorted(ham.items(), key=lambda d: d[1])[-10:]
                print "wifi", sorted(haw.items(), key=lambda d: d[1])[-10:]

def timeTop():
	with open('timeWeekdays') as f:
                all = f.readlines()
		ha = {}
                for ss in all:
                        m = ss.split('\t')
                        if ha.has_key(m[0]):
                                ha[m[0]] += int(m[2])
                        else:
                                ha[m[0]] = int(m[2])
		print sorted(ha.items(), key=lambda d: d[1])[-10:]

def timeH():
	with open('timeWeekend') as f:
		all = f.readlines()
		ha = {}
		for ss in all:
			m = ss.split('\t')
			if ha.has_key(m[1]):
				if ha[m[1] + 'time'] < int(m[2]):
					ha[m[1]] = m[0]
					ha[m[1] + 'time'] = int(m[2])
			else:
				ha[m[1]] = m[0]
				ha[m[1] + 'time'] = int(m[2])
		print ha

if __name__ == '__main__':
	cata = {'1':timeH, '2':timeTop, '3':bigAna, '4':networkTop, '5':speedTop}
	print cata
	try:
		while True:
			x = raw_input()
			cata.get(x)()
	except KeyboardInterrupt:
		exit(0)
